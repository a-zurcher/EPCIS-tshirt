'use strict';


/**
 * Query the metadata of the endpoint to access EPCIS events by business location.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * bizLocation String A business location value.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.bizLocationsBizLocationEventsOPTIONS = function(bizLocation,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the endpoint to access an individual business location.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * bizLocation String A business location value.
 * no response value expected for this operation
 **/
exports.bizLocationsBizLocationOPTIONS = function(bizLocation) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata related to the business locations endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.bizLocationsOPTIONS = function(gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the endpoint to access EPCIS events by business step.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * bizStep String A business step value.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.bizStepsBizStepEventsOPTIONS = function(bizStep,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query metadata of the endpoint to access an individual business step.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * bizStep String A business step value.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.bizStepsBizStepOPTIONS = function(bizStep,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query metadata related to the business steps endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.bizStepsOPTIONS = function(gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the capture job endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used for a given capture job. 
 *
 * captureID String A unique value identifying a capture job generated by the server.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.captureCaptureIDOPTIONS = function(captureID,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Discover the settings of the capture interface.
 * The `OPTIONS` method is used as a discovery service for `/capture`. It describes - which EPCIS and CBV versions are supported, - the EPCIS and CBV extensions, - the maximum payload size as count of EPCIS events (`GS1-EPCIS-Capture-Limit` header) or as a maximum payload size in bytes (`GS1-EPCIS-Capture-File-Size-Limit` header) - what the server will do if an error occurred during capture (`GS1-Capture-Error-Behaviour` header). The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0. 
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.captureOPTIONS = function(gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the endpoint to access EPCIS events by disposition.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * disposition String A disposition value.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.dispositionsDispositionEventsOPTIONS = function(disposition,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the endpoint to access an individual disposition.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * disposition String A disposition value.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.dispositionsDispositionOPTIONS = function(disposition,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata related to the dispositions endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.dispositionsOPTIONS = function(gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the endpoint to access EPCIS events by EPC in a URN or constrained GS1 Digital Link form (URL encoded).
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * epc String An electronic product code value.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.epcsEpcEventsOPTIONS = function(epc,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query metadata of the electronic product code.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * epc String An electronic product code value.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.epcsEpcOPTIONS = function(epc,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query metadata related to the electronic product codes endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.epcsOPTIONS = function(gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the endpoint to access EPCIS events by event type.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * eventType eventType Names of EPCIS event types. 
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.eventTypesEventTypeEventsOPTIONS = function(eventType,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query metadata of the EPCIS event type endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * eventType eventType Names of EPCIS event types. 
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.eventTypesEventTypeOPTIONS = function(eventType,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Returns all EPCIS event types currently available in the EPCIS repository.
 * EPCIS event types specify the schema of an event. This endpoint returns the 5 standard event types as well as any custom event types supported by this repository.
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * nextPageToken NextPageToken  (optional)
 * perPage PerPage  (optional)
 * gS1EPCISMin GS1-EPCIS-Min The lowest EPCIS version supported.  (optional)
 * gS1EPCISMax GS1-EPCIS-Max The highest EPCIS version supported. (optional)
 * gS1CBVMin GS1-CBV-Min The lowest Core Business Vocabulary version supported.  (optional)
 * gS1CBVMax GS1-CBV-Max The highest Core Business Vocabulary version supported.  (optional)
 * returns EventTypeCollection
 **/
exports.eventTypesGET = function(gS1Extensions,nextPageToken,perPage,gS1EPCISMin,gS1EPCISMax,gS1CBVMin,gS1CBVMax) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "@context" : [ "https://ref.gs1.org/standards/epcis/2.0.0/epcis-context.jsonld", {
    "ex" : "https://example.org/myCustomEventTypes/"
  } ],
  "type" : "Collection",
  "member" : [ "AggregationEvent", "AssociationEvent", "ObjectEvent", "TransactionEvent", "TransformationEvent", "ex:aCustomEventType" ]
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Query metadata for the EPCIS event types endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.eventTypesOPTIONS = function(gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query metadata for the endpoint to access an individual EPCIS event.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * eventID String The ID of an EPCIS event. An EPCIS event ID must be unique across all events in the system. 
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.eventsEventIDOPTIONS = function(eventID,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query metadata for the EPCIS events endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.eventsOPTIONS = function(gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the EPCIS queries endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.queriesOPTIONS = function(gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the EPCIS events query result endpoint.
 * The `OPTIONS` method is used to discover capabilities for named queries. It describes which EPCIS and CBV versions are used in the query result supported as well as EPCIS and CBV extensions. 
 *
 * queryName QueryName The name of an EPCIS event query.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.queriesQueryNameEventsOPTIONS = function(queryName,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the named queries endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * queryName QueryName The name of an EPCIS event query.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.queriesQueryNameOPTIONS = function(queryName,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the subscriptions endpoint.
 * The `OPTIONS` method is used as a discovery service for query subscriptions. 
 *
 * queryName QueryName The name of an EPCIS event query.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.queriesQueryNameSubscriptionsOPTIONS = function(queryName,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the endpoint for an individual subscription.
 * The `OPTIONS` method is used to discover capabilities for a query subscription. 
 *
 * queryName QueryName The name of an EPCIS event query.
 * subscriptionID subscriptionID 
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.queriesQueryNameSubscriptionsSubscriptionIDOPTIONS = function(queryName,subscriptionID,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata related to the read points endpoint.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.readPointsOPTIONS = function(gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the endpoint to access EPCIS events by read point.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * readPoint String A read point value.
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * no response value expected for this operation
 **/
exports.readPointsReadPointEventsOPTIONS = function(readPoint,gS1Extensions) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Query the metadata of the endpoint to access an individual read point.
 * EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV versions are used. 
 *
 * readPoint String A read point value.
 * no response value expected for this operation
 **/
exports.readPointsReadPointOPTIONS = function(readPoint) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Returns the list of top level resources available for this EPCIS repository.
 * This endpoint returns all the top-level resources currently available in the repository. 
 *
 * gS1Extensions GS1-Extensions Specific EPCIS or CBV extensions supported (e.g., for FIT).  (optional)
 * gS1EPCISMin GS1-EPCIS-Min The lowest EPCIS version supported.  (optional)
 * gS1EPCISMax GS1-EPCIS-Max The highest EPCIS version supported. (optional)
 * gS1CBVMin GS1-CBV-Min The lowest Core Business Vocabulary version supported.  (optional)
 * gS1CBVMax GS1-CBV-Max The highest Core Business Vocabulary version supported.  (optional)
 * returns TopLevelResourceCollection
 **/
exports.rootGET = function(gS1Extensions,gS1EPCISMin,gS1EPCISMax,gS1CBVMin,gS1CBVMax) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "member" : [ "[\"events\",\"eventTypes\",\"epcs\",\"bizSteps\",\"bizLocations\",\"readPoints\",\"dispositions\",\"capture\",\"queries\"]", "[\"events\",\"eventTypes\",\"epcs\",\"bizSteps\",\"bizLocations\",\"readPoints\",\"dispositions\",\"capture\",\"queries\"]" ],
  "type" : "Collection",
  "@context" : ""
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Query server settings, EPCIS version(s) and related vocabularies/standards.
 * `OPTIONS` on the root path gives the client an overview of the server's EPCIS-related configurations. 
 *
 * no response value expected for this operation
 **/
exports.rootOPTIONS = function() {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}

